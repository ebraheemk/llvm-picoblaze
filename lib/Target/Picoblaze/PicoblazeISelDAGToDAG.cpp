//===-- PicoblazeISelDAGToDAG.cpp - A dag to dag inst selector for Picoblaze ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Picoblaze target.
//
//===----------------------------------------------------------------------===//

#include "Picoblaze.h"
#include "PicoblazeTargetMachine.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Function.h"
#include "llvm/Intrinsics.h"
#include "llvm/CallingConv.h"
#include "llvm/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetLowering.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

namespace {
  struct PicoblazeISelAddressMode {
    enum {
      RegBase,
      FrameIndexBase
    } BaseType;

    struct {            // This is really a union, discriminated by BaseType!
      SDValue Reg;
      int FrameIndex;
    } Base;
	
	bool bConst;
    int16_t Disp;
    const GlobalValue *GV;
    const Constant *CP;
    const BlockAddress *BlockAddr;
    const char *ES;
    int JT;
    unsigned Align;    // CP alignment.

    PicoblazeISelAddressMode()
      : BaseType(RegBase), Disp(0), GV(0), CP(0), BlockAddr(0),
        ES(0), JT(-1), Align(0) ,bConst(false){
    }

    bool hasSymbolicDisplacement() const {
      return GV != 0 || CP != 0 || ES != 0 || JT != -1;
    }

    void dump() {
      errs() << "PicoblazeISelAddressMode " << this << '\n';
      if (BaseType == RegBase && Base.Reg.getNode() != 0) {
        errs() << "Base.Reg ";
        Base.Reg.getNode()->dump();
      } else if (BaseType == FrameIndexBase) {
        errs() << " Base.FrameIndex " << Base.FrameIndex << '\n';
      }
      errs() << " Disp " << Disp << '\n';
      if (GV) {
        errs() << "GV ";
        GV->dump();
      } else if (CP) {
        errs() << " CP ";
        CP->dump();
        errs() << " Align" << Align << '\n';
      } else if (ES) {
        errs() << "ES ";
        errs() << ES << '\n';
      } else if (JT != -1)
        errs() << " JT" << JT << " Align" << Align << '\n';
    }
  };
}

/// PicoblazeDAGToDAGISel - Picoblaze specific code to select Picoblaze machine
/// instructions for SelectionDAG operations.
///
namespace {
class ISelUpdater : public SelectionDAG::DAGUpdateListener {
  SelectionDAG::allnodes_iterator &ISelPosition;
public:
  ISelUpdater(SelectionDAG &DAG, SelectionDAG::allnodes_iterator &isp)
    : SelectionDAG::DAGUpdateListener(DAG), ISelPosition(isp) {}

  /// NodeDeleted - Handle nodes deleted from the graph. If the node being
  /// deleted is the current ISelPosition node, update ISelPosition.
  ///
  virtual void NodeDeleted(SDNode *N, SDNode *E) {
    if (ISelPosition == SelectionDAG::allnodes_iterator(N))
      ++ISelPosition;
  }
};
  class PicoblazeDAGToDAGISel : public SelectionDAGISel {
    const PicoblazeTargetLowering &Lowering;
    const PicoblazeSubtarget &Subtarget;

  public:
    PicoblazeDAGToDAGISel(PicoblazeTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel),
        Lowering(*TM.getTargetLowering()),
        Subtarget(*TM.getSubtargetImpl()) { }

    virtual const char *getPassName() const {
      return "Picoblaze DAG->DAG Pattern Instruction Selection";
    }

    bool MatchAddress(SDValue N, PicoblazeISelAddressMode &AM);
    bool MatchWrapper(SDValue N, PicoblazeISelAddressMode &AM);
    bool MatchAddressBase(SDValue N, PicoblazeISelAddressMode &AM);

    virtual bool
    SelectInlineAsmMemoryOperand(const SDValue &Op, char ConstraintCode,
                                 std::vector<SDValue> &OutOps);

    // Include the pieces autogenerated from the target description.
  #include "PicoblazeGenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
    SDNode *SelectIndexedLoad(SDNode *Op);
    SDNode *SelectIndexedBinOp(SDNode *Op, SDValue N1, SDValue N2,
                               unsigned Opc8, unsigned Opc16);

    bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Disp);
	bool SelectAddrIndexed(SDValue Addr, SDValue &Base);
	bool SelectAddrUnindexed(SDValue Addr, SDValue &Base);
	bool SelectAddrCall(SDValue Addr, SDValue &Base);
	bool SelectAddrFrameindex(SDNode *pParent,SDValue Addr, SDValue &Imm);

	virtual void PicoblazeDAGToDAGISel::PreprocessISelDAG() ;
  };
}  // end anonymous namespace

/// createPicoblazeISelDag - This pass converts a legalized DAG into a
/// Picoblaze-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createPicoblazeISelDag(PicoblazeTargetMachine &TM,
                                        CodeGenOpt::Level OptLevel) {
											PR_FUNCTION();
  return new PicoblazeDAGToDAGISel(TM, OptLevel);
}


/// MatchWrapper - Try to match PicoblazeISD::Wrapper node into an addressing mode.
/// These wrap things that will resolve down into a symbol reference.  If no
/// match is possible, this returns true, otherwise it returns false.
bool PicoblazeDAGToDAGISel::MatchWrapper(SDValue N, PicoblazeISelAddressMode &AM) {
	PR_FUNCTION();
  // If the addressing mode already has a symbol as the displacement, we can
  // never match another symbol.
  if (AM.hasSymbolicDisplacement())
    return true;

  SDValue N0 = N.getOperand(0);

  if (GlobalAddressSDNode *G = dyn_cast<GlobalAddressSDNode>(N0)) {
    AM.GV = G->getGlobal();
    AM.Disp += G->getOffset();
    //AM.SymbolFlags = G->getTargetFlags();
  } else if (ConstantPoolSDNode *CP = dyn_cast<ConstantPoolSDNode>(N0)) {
    AM.CP = CP->getConstVal();
    AM.Align = CP->getAlignment();
    AM.Disp += CP->getOffset();
    //AM.SymbolFlags = CP->getTargetFlags();
  } else if (ExternalSymbolSDNode *S = dyn_cast<ExternalSymbolSDNode>(N0)) {
    AM.ES = S->getSymbol();
    //AM.SymbolFlags = S->getTargetFlags();
  } else if (JumpTableSDNode *J = dyn_cast<JumpTableSDNode>(N0)) {
    AM.JT = J->getIndex();
    //AM.SymbolFlags = J->getTargetFlags();
  } else {
    AM.BlockAddr = cast<BlockAddressSDNode>(N0)->getBlockAddress();
    //AM.SymbolFlags = cast<BlockAddressSDNode>(N0)->getTargetFlags();
  }
  return false;
}

/// MatchAddressBase - Helper for MatchAddress. Add the specified node to the
/// specified addressing mode without any further recursion.
bool PicoblazeDAGToDAGISel::MatchAddressBase(SDValue N, PicoblazeISelAddressMode &AM) {
	PR_FUNCTION();
  // Is the base register already occupied?
  if (AM.BaseType != PicoblazeISelAddressMode::RegBase || AM.Base.Reg.getNode()) {
    // If so, we cannot select it.
    return true;
  }

  // Default, generate it as a register.
  AM.BaseType = PicoblazeISelAddressMode::RegBase;
  AM.Base.Reg = N;
  return false;
}

bool PicoblazeDAGToDAGISel::MatchAddress(SDValue N, PicoblazeISelAddressMode &AM) {
	PR_FUNCTION();
  DEBUG(errs() << "MatchAddress: "; AM.dump());

  switch (N.getOpcode()) {
  default: break;
  case ISD::Constant: {
    uint64_t Val = cast<ConstantSDNode>(N)->getSExtValue();
    AM.Disp += Val;
    return false;
  }

  case PicoblazeISD::Wrapper:
    if (!MatchWrapper(N, AM))
      return false;
    break;
  
  case ISD::GlobalAddress:
     AM.GV = cast<GlobalAddressSDNode>(N)->getGlobal();
     AM.Disp += cast<GlobalAddressSDNode>(N)->getOffset();
	return false;
	break;
  case ISD::FrameIndex:
	
    if (AM.BaseType == PicoblazeISelAddressMode::RegBase
        && AM.Base.Reg.getNode() == 0) 
	 {
      AM.BaseType = PicoblazeISelAddressMode::FrameIndexBase;
      AM.Base.FrameIndex = cast<FrameIndexSDNode>(N)->getIndex();
      return false;
    }
    break;

  case ISD::ADD: {
    PicoblazeISelAddressMode Backup = AM;
    if (!MatchAddress(N.getNode()->getOperand(0), AM) &&
        !MatchAddress(N.getNode()->getOperand(1), AM))
      return false;
    AM = Backup;
    if (!MatchAddress(N.getNode()->getOperand(1), AM) &&
        !MatchAddress(N.getNode()->getOperand(0), AM))
      return false;
    AM = Backup;

    break;
  }

  case ISD::OR:
    // Handle "X | C" as "X + C" iff X is known to have C bits clear.
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(N.getOperand(1))) {
      PicoblazeISelAddressMode Backup = AM;
      uint64_t Offset = CN->getSExtValue();
      // Start with the LHS as an addr mode.
      if (!MatchAddress(N.getOperand(0), AM) &&
          // Address could not have picked a GV address for the displacement.
          AM.GV == NULL &&
          // Check to see if the LHS & C is zero.
          CurDAG->MaskedValueIsZero(N.getOperand(0), CN->getAPIntValue())) {
        AM.Disp += Offset;
        return false;
      }
      AM = Backup;
    }
    break;
  }

  return MatchAddressBase(N, AM);
}

/// SelectAddr - returns true if it is able pattern match an addressing mode.
/// It returns the operands which make up the maximal addressing mode it can
/// match by reference.
bool PicoblazeDAGToDAGISel::SelectAddr(SDValue N,
                                    SDValue &Base, SDValue &Disp) {
										PR_FUNCTION();
  PicoblazeISelAddressMode AM;

  if (MatchAddress(N, AM))
    return false;

  EVT VT = N.getValueType();
  if (AM.BaseType == PicoblazeISelAddressMode::RegBase) {
    if (!AM.Base.Reg.getNode())
      AM.Base.Reg = CurDAG->getRegister(0, VT);
  }

  Base  = (AM.BaseType == PicoblazeISelAddressMode::FrameIndexBase) ?
    CurDAG->getTargetFrameIndex(AM.Base.FrameIndex, TLI.getPointerTy()) :
    AM.Base.Reg;

  if (AM.GV)
    Disp = CurDAG->getTargetGlobalAddress(AM.GV, N->getDebugLoc(),
                                          MVT::i8, AM.Disp,
                                          0/*AM.SymbolFlags*/);
  else if (AM.CP)
    Disp = CurDAG->getTargetConstantPool(AM.CP, MVT::i8,
                                         AM.Align, AM.Disp, 0/*AM.SymbolFlags*/);
  else if (AM.ES)
    Disp = CurDAG->getTargetExternalSymbol(AM.ES, MVT::i8, 0/*AM.SymbolFlags*/);
  else if (AM.JT != -1)
    Disp = CurDAG->getTargetJumpTable(AM.JT, MVT::i8, 0/*AM.SymbolFlags*/);
  else if (AM.BlockAddr)
    Disp = CurDAG->getTargetBlockAddress(AM.BlockAddr, MVT::i8, 0,
                                         0/*AM.SymbolFlags*/);
  else
    Disp = CurDAG->getTargetConstant(AM.Disp, MVT::i8);

	return true;

}
bool PicoblazeDAGToDAGISel::SelectAddrFrameindex(SDNode *pParent,SDValue N, SDValue &Index)
{
	PR_FUNCTION();
	FrameIndexSDNode*FG=dyn_cast<FrameIndexSDNode>(N);
	if( FG==NULL)
		return false;
	else
	{
		SDValue c = CurDAG->getTargetConstant(FG->getIndex(), MVT::i8);
		SDValue r = CurDAG->getRegister(Picoblaze::BP,MVT::i8); 
		Index = CurDAG->getNode(ISD::ADD,
								N->getDebugLoc(),MVT::i8,
								c,
								r);
								
				
		return true;
	}
}
bool PicoblazeDAGToDAGISel::SelectAddrIndexed(SDValue N, SDValue &Base)
{
	PR_FUNCTION();

   PicoblazeISelAddressMode AM;

   if (MatchAddress(N, AM))
     return false;
    if(AM.BaseType==PicoblazeISelAddressMode::RegBase)
	{
		return false;	
	}else
	{
		SDValue Disp;
		return SelectAddr(N,Base,Disp);
	}
	
}

bool PicoblazeDAGToDAGISel::SelectAddrUnindexed(SDValue N, SDValue &Base)
{
	PR_FUNCTION();
	Base=N;
	return true;

	PicoblazeISelAddressMode AM;
    if (MatchAddress(N, AM))
     return false;
	SDValue base,disp;
	SelectAddr(N,base,disp);
	
	SDNode *n=CurDAG->getMachineNode(Picoblaze::ADD8ri,   N->getDebugLoc(), TLI.getPointerTy(),
                                   base,
                                   disp);
	//CurDAG->viewGraph();
	 //Base=CurDAG->getNode(ISD::ADD, N->getDebugLoc(), TLI.getPointerTy(),
      //                             base,
       //                            disp);
	Base = SDValue(n,0);
	 return true;
   //PicoblazeISelAddressMode AM;

   if (MatchAddress(N, AM))
     return false;
    if(AM.BaseType==PicoblazeISelAddressMode::RegBase)
	{
		SDValue Disp;
		return SelectAddr(N,Base,Disp);
	}
	return false;
}

bool PicoblazeDAGToDAGISel::SelectAddrCall(SDValue N, SDValue &Base)
{
	
	Base = N;
	return true;
	PicoblazeISelAddressMode AM;
    if (MatchAddress(N, AM))
     return false;
	SDValue base,disp;
	SelectAddr(N,base,disp);
	
	//SDNode *n
		Base= CurDAG->getNode(ISD::ADD,   N->getDebugLoc(), TLI.getPointerTy(),
                                   base,
                                   disp);


	//Base = SDValue(n,0);
	 return true;

}

bool PicoblazeDAGToDAGISel::
SelectInlineAsmMemoryOperand(const SDValue &Op, char ConstraintCode,
                             std::vector<SDValue> &OutOps) {
								 PR_FUNCTION();
  SDValue Op0, Op1;
  switch (ConstraintCode) {
  default: return true;
  case 'm':   // memory
    if (!SelectAddr(Op, Op0, Op1))
      return true;
    break;
  }

  OutOps.push_back(Op0);
  OutOps.push_back(Op1);
  return false;
}


SDNode *PicoblazeDAGToDAGISel::Select(SDNode *Node) 
{
	PR_FUNCTION();
  DebugLoc dl = Node->getDebugLoc();

  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: ");
  DEBUG(Node->dump(CurDAG));
  DEBUG(errs() << "\n");

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(errs() << "== ";
          Node->dump(CurDAG);
          errs() << "\n");
    return NULL;
  }

  // Few custom selection stuff.
  switch (Node->getOpcode()) {
  default: break;
  case ISD::LOAD:
	  {

	  }
	  printf("LOAD\n");
	  break;
  case ISD::STORE:
	  printf("STORE\n");
	  break;
  case ISD::FRAMEADDR:
  		printf("FRAMEADDR\n");
	  	break;
   case ISD::FrameIndex: {
	   printf("FrameIndex\n");
	
             FrameIndexSDNode*FG=dyn_cast<FrameIndexSDNode>(Node);
	       SDValue c = CurDAG->getTargetConstant(FG->getIndex(), MVT::i8);
		SDValue r ( CurDAG->getMachineNode(Picoblaze::PicoblazeGETBP_INSTR,
										  Node->getDebugLoc(),
										  MVT::i8),0);
		SDValue newNode=CurDAG->getNode(
			   ISD::ADD, Node->getDebugLoc(),MVT::i8,
								c,
								r);
		ReplaceUses(SDValue(Node, 0), newNode);
		return Node;

/*
	  assert(Node->getValueType(0) == MVT::i8);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, MVT::i8);
    if (Node->hasOneUse())
      return CurDAG->SelectNodeTo(Node, Picoblaze::LOADBP, MVT::i8,
                                  TFI, CurDAG->getTargetConstant(0, MVT::i8));
    return CurDAG->getMachineNode(Picoblaze::LOADBP, dl, MVT::i8,
                                  TFI, CurDAG->getTargetConstant(0, MVT::i8));
	*/							 
  }
  						
   /*case ISD::GlobalAddress:
	   {
		GlobalAddressSDNode * GANode  = dyn_cast<GlobalAddressSDNode>(Node);
		return CurDAG->SelectNodeTo(Node,Picoblaze::LOADBP, MVT::i8,
                                  SDValue(), CurDAG->getTargetConstant(0, MVT::i8));
	   break;
	   }
	   */
   //case Picoblaze::FETCH_R2:
	 //  break;
  }
  if(Node->getOpcode()==1)
  {
	//  _asm int 3;
  }
  printf("\n%d\t",Node->getOpcode());
  // Select the default instruction
  SDNode *ResNode = SelectCode(Node);

  DEBUG(errs() << "=> ");
  if (ResNode == NULL || ResNode == Node)
    DEBUG(Node->dump(CurDAG));
  else
    DEBUG(ResNode->dump(CurDAG));
  DEBUG(errs() << "\n");

  return ResNode;

}

 void PicoblazeDAGToDAGISel::PreprocessISelDAG() 
{
	 // Select target instructions for the DAG.
  {
    // Number all nodes with a topological order and set DAGSize.
    DAGSize = CurDAG->AssignTopologicalOrder();

    // Create a dummy node (which is not added to allnodes), that adds
    // a reference to the root node, preventing it from being deleted,
    // and tracking any changes of the root.
    HandleSDNode Dummy(CurDAG->getRoot());
    SelectionDAG::allnodes_iterator ISelPosition (CurDAG->getRoot().getNode());
    ++ISelPosition;

    // Make sure that ISelPosition gets properly updated when nodes are deleted
    // in calls made from this function.
    ISelUpdater ISU(*CurDAG, ISelPosition);

    // The AllNodes list is now topological-sorted. Visit the
    // nodes by starting at the end of the list (the root of the
    // graph) and preceding back toward the beginning (the entry
    // node).
    while (ISelPosition != CurDAG->allnodes_begin()) {
      SDNode *Node = --ISelPosition;
      // Skip dead nodes. DAGCombiner is expected to eliminate all dead nodes,
      // but there are currently some corner cases that it misses. Also, this
      // makes it theoretically possible to disable the DAGCombiner.
      if (Node->use_empty())
        continue;

      SDNode *ResNode = Select(Node);

      // FIXME: This is pretty gross.  'Select' should be changed to not return
      // anything at all and this code should be nuked with a tactical strike.

      // If node should not be replaced, continue with the next one.
      if (ResNode == Node || Node->getOpcode() == ISD::DELETED_NODE)
        continue;
      // Replace node.
      if (ResNode)
        ReplaceUses(Node, ResNode);

      // If after the replacement this node is not used any more,
      // remove this dead node.
      if (Node->use_empty()) // Don't delete EntryToken, etc.
        CurDAG->RemoveDeadNode(Node);
    }

    CurDAG->setRoot(Dummy.getValue());
  }

  DEBUG(errs() << "===== Instruction selection ends:\n");
}